@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Supabase.Gotrue.Exceptions
@using Supabase.Postgrest.Exceptions
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations

@page "/register"

<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        @if (string.IsNullOrEmpty(message))
        {
            <h3>@message</h3>
        }
        <EditForm Model="Input" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalProviders />
        </section>
    </div>
</div>

@code {
    private string message = string.Empty;
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [Inject]
    public NavigationManager Navigation { get; set; }

    [Inject]
    public Supabase.Client Supabase { get; set; }
    [Inject]
    public IHttpContextAccessor Accessor { get; set; } = default!;

    public async Task RegisterUser()
    {
        try
        {
            Supabase.Gotrue.Session session = await Supabase.Auth.SignUp(Input.Email, Input.Password);
            if (session is not null)
            {
                try
                {
                    var claims = new List<Claim>
                    {
                        new(ClaimTypes.Sid, session.User.Id),
                        new(ClaimTypes.Email, session.User.Email)
                    };

                    var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                    var principal = new ClaimsPrincipal(identity);
                    await Accessor.HttpContext!.SignInAsync(principal);
                }
                catch (PostgrestException ex)
                {
                    /// TODO: add logging
                    Console.WriteLine(ex.Message);
                }

                Navigation.NavigateTo("/counter", true);
            }
            else
            {
                message = "Invalid credentials." ;
                StateHasChanged();
            }
        }
        catch (GotrueException ex)
        {
            /// TODO: implement logging
            Console.WriteLine(ex);
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "This field is required.")]
        [EmailAddress(ErrorMessage = "Invalid email")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "This field is required.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "This field is required.")]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "The password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}